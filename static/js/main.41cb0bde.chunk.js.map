{"version":3,"sources":["Components/WildfireMarker.js","Components/LocationinfoBox.js","Components/Map.js","Components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["WildfireMarker","onClick","className","icon","locationIcon","LocationinfoBox","info","id","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","marker","map","ev","categories","lat","geometries","coordinates","lng","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Header","action","method","target","App","setEventData","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAWeA,EARQ,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACI,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCMjCG,EAZS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACI,sBAAKJ,UAAU,gBAAf,UACI,qDACA,+BACI,sCAAQ,iCAASI,EAAKC,QACtB,yCAAW,iCAASD,EAAKE,kBCDnCC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAAW,EACDC,mBAAS,MADR,mBAClCC,EADkC,KACpBC,EADoB,KAInCC,EAASN,EAAUO,KAAI,SAAAC,GACzB,OAA4B,IAAxBA,EAAGC,WAAW,GAAGZ,GACV,cAAC,EAAD,CAAgBa,IAAKF,EAAGG,WAAW,GAAGC,YAAY,GAAIC,IAAKL,EAAGG,WAAW,GAAGC,YAAY,GAC3FrB,QAAS,kBAAMc,EAAgB,CAAER,GAAIW,EAAGX,GAAIC,MAAOU,EAAGV,WAEvD,QAKX,OACI,sBAAKN,UAAU,MAAf,UACI,cAAC,IAAD,CACIsB,iBAAkB,CAAEC,IAAK,2CACzBC,cAAef,EACfgB,YAAaf,EAHjB,SAKKI,IAGJF,GAAgB,cAAC,EAAD,CAAiBR,KAAMQ,QAKpDL,EAAImB,aAAe,CACfjB,OAAQ,CACJS,IAAK,WACLG,KAAM,aAGVX,KAAM,GAEKH,QC5BAoB,EAZA,WACX,OACI,yBAAQ3B,UAAU,SAAlB,UACI,qEACA,sBAAM4B,OAAO,mDAAmDC,OAAO,MAAMC,OAAO,SAApF,SACI,wBAAQ9B,UAAU,MAAlB,uCCmBD+B,MAtBf,WAAgB,IAAD,EACqBpB,mBAAS,IAD9B,mBACNH,EADM,KACKwB,EADL,KAcb,OAVAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,sEACAC,MAAM,mDADN,cACZC,EADY,gBAEOA,EAAIC,OAFX,gBAEVC,EAFU,EAEVA,OAERN,EAAaM,GAJK,2CAAH,qDAOjBC,KACC,IAED,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAK/B,UAAWA,QCTPgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41cb0bde.chunk.js","sourcesContent":["import { Icon } from '@iconify/react'\nimport locationIcon from \"@iconify/icons-mdi/pine-tree-fire\";\n\nconst WildfireMarker = ({ onClick }) => {\n    return (\n        <div className=\"location-marker\" onClick={onClick}>\n            <Icon icon={locationIcon} className=\"Wildfire-icon\" />\n        </div>\n    )\n}\n\nexport default WildfireMarker\n\n","const LocationinfoBox = ({ info }) => {\n    return (\n        <div className=\"location-info\">\n            <h2>Event Location Info</h2>\n            <ul>\n                <li>ID: <strong>{info.id}</strong></li>\n                <li>TITLE: <strong>{info.title}</strong></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default LocationinfoBox\n","import { useState } from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport WildfireMarker from './WildfireMarker'\nimport LocationinfoBox from './LocationinfoBox'\n\nconst Map = ({ eventData, center, zoom }) => {\n    const [locationInfo, setLocationInfo] = useState(null)\n\n\n    const marker = eventData.map(ev => {\n        if (ev.categories[0].id === 8) {\n            return <WildfireMarker lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]}\n                onClick={() => setLocationInfo({ id: ev.id, title: ev.title })} />\n        }\n        return null;\n    })\n\n\n\n    return (\n        <div className=\"map\">\n            <GoogleMapReact\n                bootstrapURLKeys={{ key: 'AIzaSyAvDW3jMtrXvN46oS8PziYizdJZLT1PEyU' }}\n                defaultCenter={center}\n                defaultZoom={zoom}\n            >\n                {marker}\n\n            </GoogleMapReact>\n            {locationInfo && <LocationinfoBox info={locationInfo} />}\n        </div>\n    )\n}\n\nMap.defaultProps = {\n    center: {\n        lat: 37.8678388,\n        lng: -102.5897382\n    },\n\n    zoom: 5\n}\nexport default Map","\n\nconst Header = () => {\n    return (\n        <header className=\"header\" >\n            <h1> Wildfire Tracker (Powered By NASA)</h1>\n            <form action=\"https://www.pledgeling.com/ccfwildfirerelieffund\" method=\"get\" target=\"_blank\">\n                <button className=\"btn\" >Support by Donating</button>\n            </form>\n        </header>\n\n    )\n}\n\nexport default Header","import { useState, useEffect } from 'react'\nimport Map from './Components/Map'\nimport Header from './Components/Header'\n\nfunction App() {\n  const [eventData, setEventData] = useState([])\n\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const { events } = await res.json()\n\n      setEventData(events)\n    }\n\n    fetchEvents()\n  }, [])\n  return (\n    <div>\n      <Header />\n      <Map eventData={eventData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}